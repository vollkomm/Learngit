
1、创建仓库（repository）
	mkdir 创建目录
	git init 创建仓库
	pwd 显示当前目录
	（可以用cd命令切换目录）

2、将文件添加到仓库
	git add 添加文件
	git commit -m "comment" 提交（引号内为提交说明）（不写comment会进入vim编辑器，先按Esc(住)，再按住<Shift>+<z>+<z>退出）
	（git add可以添加多个文件，后，一次提交所有文件）（git add -A 添加所有文件）
	（git add file1.txt file2.txt file3.txt）
	（git commit -m "comment")

3、查看当前工作区（pwd显示目录）状态
	git status 查看状态
	git diff <filename> 查看修改内容

4、版本回退
	git log 查看提交历史版本信息
	（git log --pretty=oneline 简略格式）
	（git log 输出日志s，输出日志后退出q）
	git reset --hard head^
	（head为当前版本，一个^表示head的前一个版本，两个^^表示head前两个版本，可以标记为head~100表示head前一百个版本）
	git reset --hard VersionID 也可以写版本ID，可用于回退错误后恢复
	git reflog 记录了每一步操作及其版本ID，可用于查找要恢复的版本ID
	git revert <VersionID> 退回中间某次的提交
	（测试过未通过，提示”	error: Reverting is not possible because you have unmerged files.
				hint: Fix them up in the work tree, and then use 'git add/rm <file>'
				hint: as appropriate to mark resolution and make a commit.
				fatal: revert failed；
				error: your local changes would be overwritten by revert.
				hint: commit your changes or stash them to proceed.
				fatal: revert failed）

5、暂存区的概念
	git add 把文件放到暂存区，git commit一次性将暂存区内容提交到默认分支master（git会自动创建一个默认分支）

6、管理修改

7、撤销修改
	概念：工作区（文件目录），暂存区，分支
	git checkout -- <filename> 从工作区中撤销，即恢复修改过的文件
	（注意--和<filename>之间有空格）
	git reset head <file> 从暂存区中撤销到工作区

8、删除
	git rm <filename>

9、github.com上创建远程库

10、git remote add origin git@github.com:vollkomm/learngit.git 关联远程库
	（若提示fatal: remote origin already exists.，则先git remote rm origin）
	git push -u origin master 本地内容推送至远程库
	（参数-u，第一次推送分支，将本地分支与远程库分支关联起来，以后可省略此参数）
	https://blog.csdn.net/scene_2015/article/details/81779543
	可能发生的问题：
		$ git push -u origin master
		To github.com:perfectless/djstuff.git
		 ! [rejected]        master -> master (non-fast-forward)
		error: failed to push some refs to 'git@github.com:perfectless/djstuff.git'
		hint: Updates were rejected because the tip of your current branch is behind
		hint: its remote counterpart. Integrate the remote changes (e.g.
		hint: 'git pull ...') before pushing again.
		hint: See the 'Note about fast-forwards' in 'git push --help' for details.
	解决办法：先强制合并远程库 git pull origin master --allow-unrelated-histories
		再git push


11、关联多个github账号
	1）ssh-keygen -t rsa -C"perfectless@qq.com"
		ssh-keygen -t rsa -C"3346563533@qq.com"
		生成两个SSH Key（C:\Users\Administrator\.ssh）
		将公钥(.pub)内容分别添加到两个账号的github.com/Settings/SSH and GPG Keys
	2）添加私钥
		ssh-agent -s 打开ssh-agent
		ssh-agent bash --login -i 把bash挂到ssh-agent下面
		ssh-add ~/.ssh/id_rsa_vollkomm 添加私钥
		ssh-add ~/.ssh/id_rsa_perfectless
	3）创建config文件（文件名即config无扩展名）
		# perfectless
		Host gitp
		HostName github.com
		User perfectless
		IdentityFile ~/.ssh/id_rsa_perfectless
		# vollkomm                                                                           
		Host githubv
		HostName github.com
		User vollkomm
		IdentityFile ~/.ssh/id_rsa_vollkomm
	4）测试
		ssh -T gitp

12、设置用户名（user.name）/邮箱（user.email）
	git config --global --unset user.name 删除全局用户名（删除后可给不同远程库设置独立的用户名/邮箱）
	git config --global --unset user.email 删除全局邮箱
	git config --global user.name <username> 设置全局用户名（登录所有远程库都以此用户）
	git config --global user.email <email> 设置全局邮箱
	git config user.name <username> 设置用户名
	git config user.email <email> 设置邮箱
	git config user.name 查看用户名
	（单独设置时需要切换到要设置的远程库，用命令cd在git-bash中切换）

13、git clone git@gitv:vollkomm/learngit.git 从远程库克隆至本地库
	git clone https://github.com/perfectless/...）

14、分支（官方建议多用分支）
	git checkout -b dev 创建并切换到新建分支dev（= git branch dev + git checkout dev）
	git branch 查看分支（当前分支以*标记）
	git merge dev 将分支dev合并到当前分支
	git branch -d dev 删除分支
	（分支并不能监控文件的修改。修改文件后，以哪个分支提交就算哪个分支。可以先修改，再创建分支、提交、合并、删除分支）
	（还不明白为啥还要多建一个分支？官方为啥建议多用分支？2019515）

ques、重启电脑后，需要ssh-add ~/.ssh/id_rsa_vollkomm才能重新push，clone和pull不受影响
	？？

15、解决merge冲突**
	https://www.liaoxuefeng.com/wiki/896043488029600/900004111093344
	手动合并
	git log --graph --pretty=oneline --abbrev-commit 查看合并情况

16、每次重启git-bash都需要重新添加私钥（11、）。在git-bash安装目录中找到/etc/bash.bashrc在文件末尾添加如下内容，可解决该问题
	（产生问题的原因 https://segmentfault.com/q/1010000000835302 ）
	#为了启用gitbash时不需每次重新添加私钥
	eval "$(ssh-agent -s)"
	ssh-add ~/.ssh/id_rsa_perfectless
	ssh-add ~/.ssh/id_rsa_vollkomm
	（方法解决：打开git-bash后，自动添加私钥）
	但，此时再用vollkomm同步内容（git push origin）时会有如下错误提示：（就是说同时用两个github账号时，不适用此方法。该问题暂未找到有效解决办法，只能去掉）
	ERROR: Permission to vollkomm/learngit.git denied to perfectless.
	fatal: Could not read from remote repository.
	Please make sure you have the correct access rights
	and the repository exists.
